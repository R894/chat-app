{
    "swagger": "2.0",
    "info": {
        "description": "This is a chat API",
        "title": "Chat API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/api",
    "paths": {
        "/chats": {
            "post": {
                "description": "Creates a new chat between two users or returns an existing chat if one already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new chat or return an existing one",
                "operationId": "create-chat",
                "parameters": [
                    {
                        "description": "JSON request to create a chat",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.CreateChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the created or existing chat",
                        "schema": {
                            "$ref": "#/definitions/models.Chat"
                        }
                    }
                }
            }
        },
        "/chats/find/{firstId}/{secondId}": {
            "get": {
                "description": "Retrieves a chat between two specified users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get a chat between two specific users",
                "operationId": "find-chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the first user",
                        "name": "firstId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the second user",
                        "name": "secondId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the chat between the specified users",
                        "schema": {
                            "$ref": "#/definitions/models.Chat"
                        }
                    }
                }
            }
        },
        "/chats/{userId}": {
            "get": {
                "description": "Retrieves all chats for a given user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all chats for a specific user",
                "operationId": "find-user-chats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of user's chats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Chat"
                            }
                        }
                    }
                }
            }
        },
        "/messages": {
            "post": {
                "description": "Creates a new message in a chat and returns the message along with the sender's username.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new message in a chat",
                "operationId": "create-message",
                "parameters": [
                    {
                        "description": "JSON request to create a message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.CreateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the created message with the sender's username",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageWithUser"
                        }
                    }
                }
            }
        },
        "/messages/{chatId}": {
            "get": {
                "description": "Retrieves messages in a chat, including sender usernames, and returns them sorted by creation date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get messages in a chat",
                "operationId": "get-messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the chat",
                        "name": "chatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of messages in the chat with sender usernames",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.MessageWithUser"
                            }
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "description": "Retrieves all users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all users",
                "operationId": "get-users",
                "responses": {
                    "200": {
                        "description": "Returns the list of all users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    }
                }
            }
        },
        "/users/friends": {
            "post": {
                "description": "Retrieves the friends of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get friends of a user",
                "operationId": "get-user-friends",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of user's friends",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    }
                }
            }
        },
        "/users/friends/accept": {
            "post": {
                "description": "Accepts a friend request between two users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Accept a friend request",
                "operationId": "accept-friend-request",
                "parameters": [
                    {
                        "description": "JSON request to accept a friend request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.FriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a success message",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/friends/add": {
            "post": {
                "description": "Sends a friend request from one user to another.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Send a friend request",
                "operationId": "send-friend-request",
                "parameters": [
                    {
                        "description": "JSON request to send a friend request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.FriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a success message",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/friends/decline": {
            "post": {
                "description": "Declines a friend request between two users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Decline a friend request",
                "operationId": "decline-friend-request",
                "parameters": [
                    {
                        "description": "JSON request to decline a friend request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.FriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a success message",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticates a user based on their email and password, returning the user information and a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login user",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "JSON request to log in a user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the authenticated user and a JWT token",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Registers a new user and returns the user information along with a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register a new user",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "JSON request to register a new user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the registered user and a JWT token",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Retrieves a user by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Find a user by ID",
                "operationId": "find-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the user with the specified ID",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.FriendRequest": {
            "type": "object",
            "required": [
                "friendId",
                "userId"
            ],
            "properties": {
                "friendId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.MessageWithUser": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/models.Message"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "models.Chat": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "chatId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "friendsList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "pendingRequests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "repository.CreateChatRequest": {
            "type": "object",
            "required": [
                "firstId",
                "secondId"
            ],
            "properties": {
                "firstId": {
                    "type": "string"
                },
                "secondId": {
                    "type": "string"
                }
            }
        },
        "repository.CreateMessageRequest": {
            "type": "object",
            "required": [
                "chatId",
                "senderId",
                "text"
            ],
            "properties": {
                "chatId": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "repository.RegisterUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 4
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        }
    }
}